name: CD

on:
  push:
    branches: [main]

jobs:
  tests:
    uses: ./.github/workflows/tests.yaml

  # Revert commit (only should run on failure of some phase in a CI/CD pipeline)
  auto-revert-commit:
    needs: tests
    runs-on: ubuntu-latest
    if: always() && (needs.tests.result == 'failure')
    steps:
      - name: Automatic Commit Revert
        uses: 'tofu-apis/revert-commit-action@v0.0.37'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          is-push-enabled: 'true'

  # Automatic version bumping of the patch version by default
  # This should execute only if the tests job passes
  automatic-version-bump:
    needs: tests
    runs-on: ubuntu-latest
    outputs:
      latest-git-tag: ${{ steps.set-latest-git-tag-output.outputs.latest-git-tag }}
    steps:
      - uses: actions/checkout@v2
      - name: Announce auto version bump
        run: echo "Commencing automatic version bump given checks/tests succeeded!"
      - name: 'Bump the package.json version on successful test execution'
        id: automatic-version-bump
        continue-on-error: true
        uses: 'phips28/gh-action-bump-version@master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Set the expected strings for automatic version bump (only major/minor explicitly define)
        with:
          minor-wording: 'minor version bump'
          major-wording: 'major version bump'
          # Handling patch-wording as optional to pick up automatic default patch bump
          target-branch: 'main'
          # Note: workflow will get skipped for automatic version bump
          commit-message: 'CI: Automatic version bump to {{version}}'
      - name: Output Post-bump version (for temporary debugging)
        if: ${{ steps.automatic-version-bump.outcome == 'success' && steps.automatic-version-bump.outputs.newTag != '' }}
        run: cat package.json
      - name: Set output variable with the tag that was just created
        id: set-latest-git-tag-output
        if: ${{ steps.automatic-version-bump.outcome == 'success' && steps.automatic-version-bump.outputs.newTag != '' }}
        run: echo "::set-output name=latest-git-tag::$(git describe --tags $(git rev-list --tags --max-count=1))"
      - name: ${{ steps.automatic-version-bump.outcome == 'failure' }}
        run: echo "Unable to make version bump commit - allowing job to succeed. This could be due to another commit being committed before the version bump commit was able to be committed."

  # Publish to NPM
  npm-publish:
    needs: automatic-version-bump
    runs-on: ubuntu-latest
    # Can be removed when we want npm-publish to always succeed
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'main'
      - id: get-node-version
        run: echo "::set-output name=node-version::$(jq -r .engines.node package.json)"
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ steps.get-node-version.outputs.node-version }}
      - id: get-yarn-version
        run: echo "::set-output name=yarn-version::$(jq -r .engines.yarn package.json)"
      - name: Install yarn
        run: npm install -g yarn@${{ steps.get-yarn-version.outputs.yarn-version }}
      - name: Output versions
        run: node --version && yarn --version
      - id: publish
        uses: JS-DevTools/npm-publish@v1
        with:
          access: public
          dry-run: false
          token: ${{ secrets.NPM_PUBLISH_ACCESS_TOKEN }}
      - if: steps.publish.outputs.type != 'none'
        run: |
          echo "Version changed: ${{ steps.publish.outputs.old-version }} => ${{ steps.publish.outputs.version }}"
